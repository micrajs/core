import '@/namespaces';

type GlobalError = Error;

declare global {
  namespace Micra {
    /**
     * This interface describes the details of an error. This structure can be used as a standard method of communication between applications, such as API and cross layer responses.
     *
     * @link https://datatracker.ietf.org/doc/html/rfc7807/
     */
    interface ErrorMessage {
      /**
       * A human-readable explanation specific to this occurrence of the problem.
       */
      detail?: string;

      /**
       * An optional object containing more specific information about the error.
       */
      extra?: Record<string, unknown>;

      /**
       * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
       */
      instance?: string;

      /**
       * The HTTP status code generated by the origin server for this occurrence of the problem.
       */
      status: number;

      /**
       * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization (e.g. using proactive content negotiation)
       */
      title: string;

      /**
       * A URI reference that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML). When this member is not present, its value is assumed to be "about:blank".
       */
      type?: string;
    }

    /**
     * This interface describes the standard error class that can be thrown by the framework.
     */
    interface Error extends GlobalError {
      /**
       * The HTTP status code generated by the origin server for this occurrence of the problem.
       */
      statusCode: number;

      /**
       * Method used to serialize the errors to a list of JSON objects.
       */
      serialize(): ErrorMessage[];
    }
  }
}

export {};
